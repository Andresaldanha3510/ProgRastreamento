"""Adicionar campo cnpj_consultado

Revision ID: 228a22a73fc6
Revises: 
Create Date: 2025-09-25 15:48:09.400544

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '228a22a73fc6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Cria a tabela de Unidade de Negócio primeiro
    unidade_negocio_table = op.create_table('unidade_negocio',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('empresa_id', sa.Integer(), nullable=False),
        sa.Column('nome', sa.String(length=150), nullable=False),
        sa.Column('razao_social', sa.String(length=255), nullable=True),
        sa.Column('cnpj', sa.String(length=14), nullable=True),
        sa.Column('is_matriz', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['empresa_id'], ['empresa.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('cnpj'),
        sa.UniqueConstraint('empresa_id', 'nome', name='_empresa_nome_uc')
    )

    # PASSO 1: Adiciona a coluna, mas PERMITE NULOS TEMPORARIAMENTE
    op.add_column('lancamento_fluxo_caixa', sa.Column('unidade_negocio_id', sa.Integer(), nullable=True))

    # Cria a Foreign Key para garantir a integridade
    op.create_foreign_key(
        'fk_lancamento_unidade_negocio',
        'lancamento_fluxo_caixa', 'unidade_negocio',
        ['unidade_negocio_id'], ['id']
    )
    
    # Conecta ao banco para poder manipular os dados
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Para cada empresa, cria uma "Matriz" e depois atualiza os lançamentos
    empresas_result = session.execute(sa.text("SELECT id, razao_social, cnpj FROM empresa")).fetchall()
    
    # Convertendo o resultado para uma lista de dicionários para melhor acesso
    empresas = [dict(row._mapping) for row in empresas_result]

    for empresa in empresas:
        # Insere a unidade "Matriz" para a empresa
        session.execute(
            unidade_negocio_table.insert().values(
                empresa_id=empresa['id'],
                nome="Matriz",
                razao_social=empresa['razao_social'],
                cnpj=empresa['cnpj'],
                is_matriz=True
            )
        )
        # Pega o ID da Matriz que acabamos de criar
        matriz_id_result = session.execute(sa.text(f"SELECT id FROM unidade_negocio WHERE empresa_id = {empresa['id']} AND is_matriz = true")).fetchone()
        if matriz_id_result:
            matriz_id = matriz_id_result[0]
            
            # PASSO 2: Atualiza todos os lançamentos antigos daquela empresa para apontar para a Matriz
            op.execute(
                f"UPDATE lancamento_fluxo_caixa SET unidade_negocio_id = {matriz_id} WHERE empresa_id = {empresa['id']} AND unidade_negocio_id IS NULL"
            )

    # PASSO 3: Agora que todos os campos estão preenchidos, ALTERA A COLUNA para NÃO PERMITIR NULOS
    op.alter_column('lancamento_fluxo_caixa', 'unidade_negocio_id', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('lancamento_fluxo_caixa', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_lancamento_fluxo_caixa_unidade_negocio_id'))
        batch_op.drop_column('unidade_negocio_id')

    op.drop_table('unidade_negocio')
    # ### end Alembic commands ###
